use crate::schema::{chat_messages, chat_sessions};
use crate::models::users::User;
use crate::models::character_card::Character;
use chrono::{DateTime, Utc};
use diesel::prelude::*;
use diesel_derive_enum::DbEnum; // For mapping the enum
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use bigdecimal::BigDecimal;

/// Represents the type of a chat message (User or AI).
/// Derives DbEnum for automatic mapping to PostgreSQL enum types.
#[derive(Debug, Serialize, Deserialize, PartialEq, Clone, DbEnum)]
#[ExistingTypePath = "crate::schema::sql_types::MessageType"] // Map to the SQL type defined by Diesel
pub enum MessageType {
    #[db_rename = "User"] // Explicitly map to DB value
    User,
    #[db_rename = "Ai"]   // Explicitly map to DB value
    Ai,
}

// Default implementation for MessageType (useful for Default derive on NewChatMessage)
impl Default for MessageType {
    fn default() -> Self {
        MessageType::User // Default to User, adjust if needed
    }
}


/// Represents a chat session in the database.
/// Linked to a user and a character.
#[derive(
    Queryable, Selectable, Identifiable, Associations, Debug, Serialize, Deserialize, PartialEq, Clone,
)]
#[diesel(belongs_to(User))]
#[diesel(belongs_to(Character))]
#[diesel(table_name = chat_sessions)]
pub struct ChatSession {
    pub id: Uuid,
    pub user_id: Uuid,
    pub character_id: Uuid,
    pub title: Option<String>,
    pub system_prompt: Option<String>,
    pub temperature: Option<BigDecimal>, // Use BigDecimal for NUMERIC
    pub max_output_tokens: Option<i32>, // Use i32 for Integer in PG
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

/// Represents data required to insert a new chat session.
#[derive(Insertable, Debug, Default, Clone, PartialEq)]
#[diesel(table_name = chat_sessions)]
pub struct NewChatSession {
    pub user_id: Uuid,
    pub character_id: Uuid,
    pub system_prompt: Option<String>,
    pub temperature: Option<BigDecimal>,
    pub max_output_tokens: Option<i32>,
    pub title: Option<String>,
    // id, created_at, updated_at are typically generated by the DB
}

/// Represents a single message within a chat session.
#[derive(
    Queryable, Selectable, Identifiable, Associations, Debug, Serialize, Deserialize, PartialEq, Clone,
)]
#[diesel(belongs_to(ChatSession, foreign_key = session_id))]
#[diesel(table_name = chat_messages)]
pub struct ChatMessage {
    pub id: Uuid,
    pub session_id: Uuid,
    pub message_type: MessageType,
    pub content: String,
    pub rag_embedding_id: Option<Uuid>, // Optional link to Qdrant vector ID
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

/// Represents data required to insert a new chat message.
#[derive(Insertable, Debug, Default, Clone, PartialEq)]
#[diesel(table_name = chat_messages)]
pub struct NewChatMessage {
    pub session_id: Uuid,
    pub message_type: MessageType,
    pub content: String,
    pub rag_embedding_id: Option<Uuid>,
    // id, created_at, updated_at are generated by the DB
} 