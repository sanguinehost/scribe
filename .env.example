# Sanguine Scribe Environment Configuration Example
# Copy this file to .env and fill in your actual values

# =============================================================================
# REQUIRED: API Keys and Secrets
# =============================================================================

# Google Gemini API Key - Get from https://aistudio.google.com/app/apikey
GEMINI_API_KEY="your_gemini_api_key_here"

# JWT Secret for session tokens - Generate a secure random string
JWT_SECRET="your_jwt_secret_here_replace_in_production"

# Encryption key for user data (exactly 32 characters)
ENCRYPTION_KEY="your_32_char_encryption_key_here!!"

# Session secret for cookie signing
SESSION_SECRET="your_session_secret_here_for_local_dev"

# Cookie signing key (64 hex characters) - Generate with openssl rand -hex 32
COOKIE_SIGNING_KEY="your_64_character_hex_cookie_signing_key_here_replace_in_production"

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Environment type: local, container, staging, production
ENVIRONMENT=local

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Connection String
# For local development with containerized postgres:
DATABASE_URL=postgresql://devuser:devpassword@localhost:5432/sanguine_scribe_dev

# For containerized backend (containers talking to each other):
# DATABASE_URL=postgresql://devuser:devpassword@postgres:5432/sanguine_scribe_dev

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================

# Qdrant Vector Database URL
# For local development with containerized qdrant:
QDRANT_URL=https://localhost:6334

# For containerized backend:
# QDRANT_URL=https://qdrant:6334

# Qdrant API Key (for development)
QDRANT_API_KEY=dev_api_key_12345

# =============================================================================
# TLS CERTIFICATE CONFIGURATION
# =============================================================================

# Certificate paths for local development (created by mkcert)
TLS_CERT_PATH=.certs-backend/cert.pem
TLS_KEY_PATH=.certs-backend/key.pem

# For containers, certificates are mounted to:
# TLS_CERT_PATH=/app/certs/cert.pem
# TLS_KEY_PATH=/app/certs/key.pem

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Frontend base URL (where your frontend is running)
FRONTEND_BASE_URL=https://localhost:5173

# =============================================================================
# COOKIE CONFIGURATION
# =============================================================================

# Cookie security settings
COOKIE_SECURE=false

# Cookie domain - DON'T set this for local development
# COOKIE_DOMAIN=localhost

# For production, set your actual domain:
# COOKIE_DOMAIN=yourdomain.com

# =============================================================================
# BACKEND SERVER CONFIGURATION
# =============================================================================

# Port for the backend server
PORT=8080

# Rust log level
RUST_LOG=info

# =============================================================================
# EMAIL CONFIGURATION (Optional)
# =============================================================================

# SMTP settings for email verification (if using)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# FROM_EMAIL=noreply@yourdomain.com

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================

# 1. For local development (cargo run):
#    - Use localhost URLs for DATABASE_URL and QDRANT_URL
#    - Use .certs-dev/ paths for certificates
#    - Set COOKIE_SECURE=false

# 2. For containerized development:
#    - Use service names (postgres, qdrant) in URLs
#    - Use /app/certs/ paths for certificates
#    - Set COOKIE_SECURE=true

# 3. Quick start: ./start.sh
#    This intelligent script will:
#    - Auto-detect your container runtime (Podman/Docker)
#    - Generate certificates if missing
#    - Start PostgreSQL and Qdrant containers
#    - Run health checks and show next steps
#
# 4. Alternative commands:
#    - One-command setup: ./start.sh (recommended)
#    - Full containerized: ./start.sh --mode=container
#    - With frontend: ./start.sh --frontend
#    - Clean restart: ./start.sh --clean
#    - Manual setup: ./scripts/certs/manage.sh local init && ./scripts/podman-dev.sh up