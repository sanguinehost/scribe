#!/bin/bash

# Sanguine Scribe Environment File Generator
# Generates a .env file with secure random secrets for local development

set -euo pipefail

# Project paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
ENV_FILE="$PROJECT_ROOT/.env"
ENV_EXAMPLE="$PROJECT_ROOT/.env.example"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${BOLD}${CYAN}$1${NC}"
}

# Check prerequisites
check_prerequisites() {
    local missing=()
    
    # Check for required tools
    if ! command -v openssl &> /dev/null; then
        missing+=("openssl")
    fi
    
    if ! command -v base64 &> /dev/null; then
        missing+=("base64")
    fi
    
    if ! command -v head &> /dev/null; then
        missing+=("head")
    fi
    
    if ! command -v tr &> /dev/null; then
        missing+=("tr")
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        log_error "Missing required tools: ${missing[*]}"
        log_info "Please install the missing tools and try again."
        exit 1
    fi
}

# Generate secure random secrets
generate_jwt_secret() {
    openssl rand -base64 32
}

generate_encryption_key() {
    # Generate exactly 32 ASCII characters for encryption key
    openssl rand -base64 24 | tr -d '+/=' | head -c 32
}

generate_session_secret() {
    openssl rand -base64 32
}

generate_cookie_signing_key() {
    # Generate 64 hex characters (32 bytes)
    openssl rand -hex 32
}

# Validate Gemini API key format
validate_gemini_key() {
    local key="$1"
    if [[ ! "$key" =~ ^AIza[a-zA-Z0-9_-]{35}$ ]]; then
        return 1
    fi
    return 0
}

# Prompt for user input
prompt_for_gemini_key() {
    local gemini_key=""
    
    echo >&2
    log_info "Please enter your Gemini API key." >&2
    log_info "Get one at: https://aistudio.google.com/app/apikey" >&2
    echo >&2
    
    while true; do
        echo -n "Gemini API Key: " >&2
        read -r gemini_key
        
        if [[ -z "$gemini_key" ]]; then
            log_warn "Gemini API key cannot be empty. Please try again." >&2
            continue
        fi
        
        if ! validate_gemini_key "$gemini_key"; then
            log_warn "Invalid Gemini API key format. Keys should start with 'AIza' followed by 35 characters." >&2
            log_info "Please check your key and try again." >&2
            continue
        fi
        
        break
    done
    
    echo "$gemini_key"
}

# Check if .env exists and offer backup
check_existing_env() {
    if [[ -f "$ENV_FILE" ]]; then
        echo
        log_warn "Existing .env file found."
        echo -n "Do you want to backup the existing file and create a new one? [y/N]: "
        read -r backup_choice
        
        if [[ "$backup_choice" != "y" && "$backup_choice" != "Y" ]]; then
            log_info "Operation cancelled. Existing .env file preserved."
            exit 0
        fi
        
        # Create backup with timestamp
        local timestamp
        timestamp=$(date +"%Y%m%d_%H%M%S")
        local backup_file="$PROJECT_ROOT/.env.backup.$timestamp"
        
        cp "$ENV_FILE" "$backup_file"
        log_success "Existing .env backed up to: $(basename "$backup_file")"
    fi
}

# Generate the .env file
generate_env_file() {
    local gemini_key="$1"
    
    log_info "Generating secure random secrets..."
    
    # Generate all secrets
    local jwt_secret
    local encryption_key
    local session_secret
    local cookie_signing_key
    
    jwt_secret=$(generate_jwt_secret)
    encryption_key=$(generate_encryption_key)
    session_secret=$(generate_session_secret)
    cookie_signing_key=$(generate_cookie_signing_key)
    
    # Create .env file
    cat > "$ENV_FILE" << EOF
# Sanguine Scribe Environment Configuration
# Generated by scripts/utils/generate-env.sh on $(date)

# =============================================================================
# REQUIRED: API Keys and Secrets
# =============================================================================

# Google Gemini API Key - Get from https://aistudio.google.com/app/apikey
GEMINI_API_KEY="$gemini_key"

# JWT Secret for session tokens - Securely generated
JWT_SECRET="$jwt_secret"

# Encryption key for user data (exactly 32 characters) - Securely generated
ENCRYPTION_KEY="$encryption_key"

# Session secret for cookie signing - Securely generated
SESSION_SECRET="$session_secret"

# Cookie signing key (64 hex characters) - Securely generated
COOKIE_SIGNING_KEY="$cookie_signing_key"

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Environment type: local, container, staging, production
ENVIRONMENT=local

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Connection String
# For local development with containerized postgres:
DATABASE_URL=postgresql://devuser:devpassword@localhost:5432/sanguine_scribe_dev

# For containerized backend (containers talking to each other):
# DATABASE_URL=postgresql://devuser:devpassword@postgres:5432/sanguine_scribe_dev

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================

# Qdrant Vector Database URL
# For local development with containerized qdrant:
QDRANT_URL=https://localhost:6334

# For containerized backend:
# QDRANT_URL=https://qdrant:6334

# Qdrant API Key (for development)
QDRANT_API_KEY=dev_api_key_12345

# =============================================================================
# TLS CERTIFICATE CONFIGURATION
# =============================================================================

# Certificate paths for local development (created by mkcert)
TLS_CERT_PATH=.certs-backend/cert.pem
TLS_KEY_PATH=.certs-backend/key.pem

# For containers, certificates are mounted to:
# TLS_CERT_PATH=/app/certs/cert.pem
# TLS_KEY_PATH=/app/certs/key.pem

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Frontend base URL (where your frontend is running)
FRONTEND_BASE_URL=https://localhost:5173

# =============================================================================
# COOKIE CONFIGURATION
# =============================================================================

# Cookie security settings
COOKIE_SECURE=false

# Cookie domain - DON'T set this for local development
# COOKIE_DOMAIN=localhost

# For production, set your actual domain:
# COOKIE_DOMAIN=yourdomain.com

# =============================================================================
# BACKEND SERVER CONFIGURATION
# =============================================================================

# Port for the backend server
PORT=8080

# Rust log level
RUST_LOG=info

# =============================================================================
# EMAIL CONFIGURATION (Optional)
# =============================================================================

# SMTP settings for email verification (if using)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# FROM_EMAIL=noreply@yourdomain.com

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================

# This .env file was generated for LOCAL DEVELOPMENT.
# All secrets have been securely generated with cryptographically strong randomness.
#
# For production deployment, you should:
# 1. Generate new secrets
# 2. Use proper certificate paths
# 3. Set COOKIE_SECURE=true
# 4. Configure proper domains
# 5. Use production database URLs
#
# To regenerate this file: rm .env && scripts/utils/generate-env.sh
EOF

    log_success "Created .env file successfully!"
}

# Show generated info
show_completion_info() {
    echo
    log_header "ðŸŽ‰ Environment Setup Complete!"
    echo
    log_info "Your .env file has been created with:"
    echo "   âœ“ Your Gemini API key"
    echo "   âœ“ Securely generated JWT secret"
    echo "   âœ“ Securely generated encryption key (32 chars)"
    echo "   âœ“ Securely generated session secret"  
    echo "   âœ“ Securely generated cookie signing key (64 hex chars)"
    echo "   âœ“ Local development defaults"
    echo
    log_info "Next steps:"
    echo "   1. Run: ./start.sh"
    echo "   2. In another terminal: cargo run --bin scribe-backend"
    echo "   3. Visit: https://localhost:5173"
    echo
    log_info "To regenerate this file anytime:"
    echo "   rm .env && scripts/utils/generate-env.sh"
}

# Main execution
main() {
    local gemini_key="${1:-}"
    
    log_header "ðŸ”§ Sanguine Scribe Environment Setup"
    echo "====================================="
    echo
    log_info "This wizard will help you create a .env file for local development."
    
    check_prerequisites
    check_existing_env
    
    # If no API key provided as argument, prompt for it
    if [[ -z "$gemini_key" ]]; then
        gemini_key=$(prompt_for_gemini_key)
    else
        # Validate the provided key
        if ! validate_gemini_key "$gemini_key"; then
            log_error "Invalid Gemini API key format provided as argument."
            log_info "Keys should start with 'AIza' followed by 35 characters."
            exit 1
        fi
        log_info "Using provided Gemini API key."
    fi
    
    echo
    generate_env_file "$gemini_key"
    show_completion_info
}

# Run main function
main "$@"